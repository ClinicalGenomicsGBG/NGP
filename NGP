#!/apps/bio/software/anaconda2/envs/hcp/bin/python
# /usr/bin/env python3

import argparse
import sys
import NGPi.hci as hci 
import json
import time
import os

"""
Uses the fastq_uploader.py from NGPr to compress, 
upload and create json files associated to the run 
and sample ID. 
""" 
def uploader(args):
    sys.path.append("/home/xcanfv/NGPr/")
    from uploader import template as template
    from uploader import files as files
    from uploader import validation as validation
    from uploader import upload_fastq as upload_fastq
    from uploader import upload_vcf as upload_vcf


    if args.template: # makes template for run and sample json then exit
        template(args)
        exit()

    files_pg = files(args)

    if validation(args) is None:
        print("Validation of json file: OK")
        if args.vcf:
            upload_vcf(args, files_pg)
        else:
            upload_fastq(args, files_pg)
    else:
        exit()

"""
Downloads or delete files from the HCP using boto3 and Jens script.
"""
def downloader(args, pretty):
    from hcp import HCPManager

    bucket_name = args.bucket
    hcpm = HCPManager(bucket_name)
    
    if args.which == "download" and args.key:
        obj = hcpm.get_object(args.key) # Get object with key.
        hcpm.download_object(obj, args.output) # Downloads file.

    if args.which == "download" and args.samplename:
        f = pretty
        results= (f["results"])
        for item in results:
            itm = (item["metadata"])
            forward = (itm["fastqForward"])
            reverse = (itm["fastqReverse"])
            string = "".join(forward).strip("[]")+","+"".join(reverse).strip("[]")
            lst = string.replace('"','').replace("\\","").split(",")

        for i in lst:
            obj = hcpm.get_object(i) # Get object with json.
            hcpm.download_object(obj, f"{args.output}/"+os.path.basename(i)) # Downloads file.

    elif args.which == "delete":
        sys.stdout.write(f"[--] You are about to delete a file \"{args.key}\", are you sure? [Y/N]?\n")
        sys.stdout.flush()
        answer = sys.stdin.readline()
        if answer[0].lower() == "y":
            hcpm.delete_object(obj) # Delete file.
            time.sleep(2)
            print(f"[--] Deleting file \"{args.key}\" \n")
        else:
            sys.exit(f"[Error] Exiting... Did not delete the file \"{args.key}\"\n")


def query(my_query, my_token, my_index, my_out=False):
    pretty = json.loads(hci.query(my_token, hci.get_template_json(my_index, my_query), my_index))
    if my_out:
        with open(my_out, "w+") as result:
            result.write(json.dumps(pretty, indent=4))
    else:
        print(json.dumps(pretty, indent=4)) 
    return pretty

def main():
    """
    Main interaction script. use of this script is voluntary, 
    but can be a good first entrypoint into interacting with the NGPi
    and NGPr
    """
    parser = argparse.ArgumentParser(prog='Interact with the filestore and index')

    subparsers = parser.add_subparsers(help="Help for subcommands")

    parser_upload = subparsers.add_parser('upload', help='Upload fastq data to the HCP')
    requiredNamed = parser_upload.add_argument_group('required arguments')
    parser_upload.set_defaults(which='upload')
    parser_upload.add_argument("-b", "--bucket", help="Specify which bucket you want to upload to")
    requiredNamed.add_argument("-s", "--sample", help="Specify the name of your sample")
    requiredNamed.add_argument("-r", "--run", help="Specify the name of the run to upload")
    parser_upload.add_argument("-p", "--path", help="The path to directory with files to upload")
    requiredNamed.add_argument("-j", "--jsonpath", required=True, help="The path to directory to put json files")
    parser_upload.add_argument("-c", "--compression", help="Give the path to a compression script for compression of fastq files using petagene")
    parser_upload.add_argument("-t", "--template", action="store_true", help="make template files for json metadata that is needed when uploading files, use only the required flags with this option")
    parser_upload.add_argument("-v", "--vcf", action="store_true", help="use flag if you want to upload vcf files to the HCP")

    parser_download = subparsers.add_parser('download', help='download data from the HCP')
    parser_download.set_defaults(which='download')
    parser_download.add_argument("-b", "--bucket", required=True, help="Specify which bucket you want to download from")
    parser_download.add_argument("-k", "--key", help="The path (key) to the file on the HCP you want to download")
    parser_download.add_argument("-j", "--json",  help="Json file with path to the  files on the HCP you want to download")
    parser_download.add_argument("-n", "--samplename", required=True, help="Sample name for files on the HCP you want to download")
    parser_download.add_argument("-i", "--indexes", nargs="?", action='store', type=str, help=': Specify buckets to list')
    parser_download.add_argument("-o", "--output", required=True, help="Where to put the file downloaded from the HCP")

    parser_delete = subparsers.add_parser('delete', help='Delete data from the HCP')
    parser_delete.set_defaults(which='delete')
    parser_delete.add_argument("-b", "--bucket", required=True, help="Specify which bucket you want to download from")
    parser_delete.add_argument("-k", "--key", required=True, help="The path (key) to the file on the HCP you want to delete")

    parser_query = subparsers.add_parser('query', help='Query the index for information about run or sample')
    parser_query.set_defaults(which="query")
    parser_query.add_argument("-q", "--query", nargs="?", action='store', type=str, help=': Specify samples to query')
    parser_query.add_argument("-i", "--indexes", nargs="?", action='store', type=str, help=': Specify buckets to list')
    parser_query.add_argument("-o", "--output", nargs="?", action='store', type=str, help=': Specify file to store outputs')


    args = parser.parse_args()

    print(args)

    if args.which == 'upload':
        print("upload stuff") # replaceme
        uploader(args)
    elif args.which == 'query':
        my_query = args.query
        token = hci.generate_token()
        my_index = args.indexes
        my_out = args.output
        query(my_query, token, my_index, my_out)
    elif args.which == 'download':
        downloader(args, query(args.samplename, hci.generate_token(), args.indexes))
    elif args.which == 'delete':
        downloader(args)
    else:
        print("Your arument was not recognised, please use 'upload', 'download', 'delete' or 'query'")
        
if __name__ == "__main__":
    main()
