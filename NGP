#!/apps/bio/software/anaconda2/envs/hcp/bin/python

# /usr/bin/env python

import argparse
import sys
sys.path.append("/home/xcanfv/NGP/NGPr")
import fastq_uploader as fq_upload
import NGPi.hci as hci 
import json
import time


"""
Uses the fastq_uploader.py from NGPr to compress, 
upload and create json files associated to the run 
and sample ID. 
""" 
def uploader(args):
    files_pg = fq_upload.files(args)
    ssheet = fq_upload.samplesheet(args)
    fq_upload.runid_json(ssheet["date"], ssheet["investigator"], args, files_pg)
    fq_upload.sample_json(ssheet["kit"], ssheet["reads"], ssheet["sample_inv"], ssheet["sex"], args, files_pg)
    fq_upload.upload_fastq(args, files_pg)


"""
Downloads or delete files from the HCP using boto3 and Jens script.
"""
def downloader(args):
    from hcp import HCPManager

    bucket_name = args.bucket
    hcpm = HCPManager(bucket_name)

    obj = hcpm.get_object(args.key) # Get object with key.
    
    if args.which == "download":
        hcpm.download_object(obj, args.output) # Downloads file.

    elif args.which == "delete":
        sys.stdout.write(f"[--] You are about to delete a file \"{args.key}\", are you sure? [Y/N]?\n")
        sys.stdout.flush()
        answer = sys.stdin.readline()
        if answer[0].lower() == "y":
            hcpm.delete_object(obj) # Delete file.
            time.sleep(2)
            print(f"[--] Deleting file \"{args.key}\" \n")
        else:
            sys.exit(f"[Error] Exiting... Did not delete the file \"{args.key}\"\n")



def query(my_query, my_token, my_index, my_out=False):
    pretty = json.loads(hci.query(my_token, hci.get_template_json(my_index, my_query), my_index))
    if my_out:
        with open(my_out, "w+") as result:
            result.write(json.dumps(pretty, indent=4))
    else:
        print(json.dumps(pretty, indent=4)) 





def main():
    """
    Main interaction script. use of this script is voluntary, 
    but can be a good first entrypoint into interacting with the NGPi
    and NGPr
    """
    parser = argparse.ArgumentParser(prog='Interact with the filestore and index')

    subparsers = parser.add_subparsers(help="Help for subcommands")

    parser_upload = subparsers.add_parser('upload', help='Upload fastq data to the HCP')
    parser_upload.set_defaults(which='upload')
    parser_upload.add_argument("-b", "--bucket", required=True, help="Specify which bucket you want to upload to")
    parser_upload.add_argument("-f", "--fastq", required=True, help="Paried or single")
    parser_upload.add_argument("-s", "--sample", required=True, help="Specify the name of your sample")
    parser_upload.add_argument("-r", "--run", required=True, help="Specify the name of the run to upload")
    parser_upload.add_argument("-p", "--path", required=True, help="The path to directory with files to upload")
    parser_upload.add_argument("-j", "--jsonpath", required=True, help="The path to directory to put json files")
    parser_upload.add_argument("-c", "--compression", help="Give the path to a compression script for compression of fastq files using petagene")
    parser_upload.add_argument("-v", "--csv", required=True, help="Path to SampleSheet.csv of run")

    parser_download = subparsers.add_parser('download', help='download data from the HCP')
    parser_download.set_defaults(which='download')
    parser_download.add_argument("-b", "--bucket", required=True, help="Specify which bucket you want to download from")
    parser_download.add_argument("-k", "--key", required=True, help="The path (key) to the file on the HCP you want to download")
    parser_download.add_argument("-o", "--output", required=True, help="Where to put the file downloaded from the HCP")

    parser_delete = subparsers.add_parser('delete', help='Delete data from the HCP')
    parser_delete.set_defaults(which='delete')
    parser_delete.add_argument("-b", "--bucket", required=True, help="Specify which bucket you want to download from")
    parser_delete.add_argument("-k", "--key", required=True, help="The path (key) to the file on the HCP you want to delete")

    parser_query = subparsers.add_parser('query', help='Query the index for information about run or sample')
    parser_query.set_defaults(which="query")
    parser_query.add_argument("-q", "--query", nargs="?", action='store', type=str, help=': Specify samples to query')
    parser_query.add_argument("-i", "--indexes", nargs="?", action='store', type=str, help=': Specify buckets to list')
    parser_query.add_argument("-o", "--output", nargs="?", action='store', type=str, help=': Specify file to store outputs')


    args = parser.parse_args()

    print(args)

    if args.which == 'upload':
        print("upload stuff") # replaceme
        uploader(args)
    elif args.which == 'download':
        downloader(args)
    elif args.which == 'delete':
        downloader(args)
    elif args.which == 'query':
        my_query = args.query
        token = hci.generate_token()
        my_index = args.indexes
        my_out = args.output
        query(my_query, token, my_index, my_out)
        
if __name__ == "__main__":
    main()
